/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_libwav(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_libwav(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_libwav(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




#include	"libwav.h"


#include <string>


#include <stdint.h>		// Use the C99 official header


#include <stdexcept>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <stdexcept>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT double SWIGSTDCALL CSharp_M_PI_get() {
  double jresult ;
  double result;
  
  result = (double)(3.14159265358979323846);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_int24_data_set(void * jarg1, int jarg2) {
  int24 *arg1 = (int24 *) 0 ;
  int arg2 ;
  
  arg1 = (int24 *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->data = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_int24_data_get(void * jarg1) {
  int jresult ;
  int24 *arg1 = (int24 *) 0 ;
  int result;
  
  arg1 = (int24 *)jarg1; 
  result = (int) ((arg1)->data);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_int24() {
  void * jresult ;
  int24 *result = 0 ;
  
  {
    try {
      result = (int24 *)new int24();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_int24(void * jarg1) {
  int24 *arg1 = (int24 *) 0 ;
  
  arg1 = (int24 *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WAVE_CHUNK_ckID_set(void * jarg1, char * jarg2) {
  WAVE_CHUNK *arg1 = (WAVE_CHUNK *) 0 ;
  char *arg2 ;
  
  arg1 = (WAVE_CHUNK *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ckID, (const char *)arg2, 4-1);
      arg1->ckID[4-1] = 0;
    } else {
      arg1->ckID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_WAVE_CHUNK_ckID_get(void * jarg1) {
  char * jresult ;
  WAVE_CHUNK *arg1 = (WAVE_CHUNK *) 0 ;
  char *result = 0 ;
  
  arg1 = (WAVE_CHUNK *)jarg1; 
  result = (char *)(char *) ((arg1)->ckID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WAVE_CHUNK_ckSize_set(void * jarg1, unsigned int jarg2) {
  WAVE_CHUNK *arg1 = (WAVE_CHUNK *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (WAVE_CHUNK *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->ckSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WAVE_CHUNK_ckSize_get(void * jarg1) {
  unsigned int jresult ;
  WAVE_CHUNK *arg1 = (WAVE_CHUNK *) 0 ;
  uint32_t result;
  
  arg1 = (WAVE_CHUNK *)jarg1; 
  result = (uint32_t) ((arg1)->ckSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WAVE_CHUNK() {
  void * jresult ;
  WAVE_CHUNK *result = 0 ;
  
  {
    try {
      result = (WAVE_CHUNK *)new WAVE_CHUNK();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WAVE_CHUNK(void * jarg1) {
  WAVE_CHUNK *arg1 = (WAVE_CHUNK *) 0 ;
  
  arg1 = (WAVE_CHUNK *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WAVE_H_RIFFTag_set(void * jarg1, char * jarg2) {
  WAVE_H *arg1 = (WAVE_H *) 0 ;
  char *arg2 ;
  
  arg1 = (WAVE_H *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->RIFFTag, (const char *)arg2, 4-1);
      arg1->RIFFTag[4-1] = 0;
    } else {
      arg1->RIFFTag[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_WAVE_H_RIFFTag_get(void * jarg1) {
  char * jresult ;
  WAVE_H *arg1 = (WAVE_H *) 0 ;
  char *result = 0 ;
  
  arg1 = (WAVE_H *)jarg1; 
  result = (char *)(char *) ((arg1)->RIFFTag);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WAVE_H_fileLength_set(void * jarg1, unsigned int jarg2) {
  WAVE_H *arg1 = (WAVE_H *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (WAVE_H *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->fileLength = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WAVE_H_fileLength_get(void * jarg1) {
  unsigned int jresult ;
  WAVE_H *arg1 = (WAVE_H *) 0 ;
  uint32_t result;
  
  arg1 = (WAVE_H *)jarg1; 
  result = (uint32_t) ((arg1)->fileLength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WAVE_H_WAVETag_set(void * jarg1, char * jarg2) {
  WAVE_H *arg1 = (WAVE_H *) 0 ;
  char *arg2 ;
  
  arg1 = (WAVE_H *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->WAVETag, (const char *)arg2, 4-1);
      arg1->WAVETag[4-1] = 0;
    } else {
      arg1->WAVETag[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_WAVE_H_WAVETag_get(void * jarg1) {
  char * jresult ;
  WAVE_H *arg1 = (WAVE_H *) 0 ;
  char *result = 0 ;
  
  arg1 = (WAVE_H *)jarg1; 
  result = (char *)(char *) ((arg1)->WAVETag);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WAVE_H_fmt_Tag_set(void * jarg1, char * jarg2) {
  WAVE_H *arg1 = (WAVE_H *) 0 ;
  char *arg2 ;
  
  arg1 = (WAVE_H *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->fmt_Tag, (const char *)arg2, 4-1);
      arg1->fmt_Tag[4-1] = 0;
    } else {
      arg1->fmt_Tag[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_WAVE_H_fmt_Tag_get(void * jarg1) {
  char * jresult ;
  WAVE_H *arg1 = (WAVE_H *) 0 ;
  char *result = 0 ;
  
  arg1 = (WAVE_H *)jarg1; 
  result = (char *)(char *) ((arg1)->fmt_Tag);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WAVE_H_fmtSize_set(void * jarg1, unsigned int jarg2) {
  WAVE_H *arg1 = (WAVE_H *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (WAVE_H *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->fmtSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WAVE_H_fmtSize_get(void * jarg1) {
  unsigned int jresult ;
  WAVE_H *arg1 = (WAVE_H *) 0 ;
  uint32_t result;
  
  arg1 = (WAVE_H *)jarg1; 
  result = (uint32_t) ((arg1)->fmtSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WAVE_H_wFormatTag_set(void * jarg1, unsigned short jarg2) {
  WAVE_H *arg1 = (WAVE_H *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (WAVE_H *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->wFormatTag = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_WAVE_H_wFormatTag_get(void * jarg1) {
  unsigned short jresult ;
  WAVE_H *arg1 = (WAVE_H *) 0 ;
  uint16_t result;
  
  arg1 = (WAVE_H *)jarg1; 
  result = (uint16_t) ((arg1)->wFormatTag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WAVE_H_nChannels_set(void * jarg1, unsigned short jarg2) {
  WAVE_H *arg1 = (WAVE_H *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (WAVE_H *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->nChannels = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_WAVE_H_nChannels_get(void * jarg1) {
  unsigned short jresult ;
  WAVE_H *arg1 = (WAVE_H *) 0 ;
  uint16_t result;
  
  arg1 = (WAVE_H *)jarg1; 
  result = (uint16_t) ((arg1)->nChannels);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WAVE_H_nSamplesPerSec_set(void * jarg1, unsigned short jarg2) {
  WAVE_H *arg1 = (WAVE_H *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (WAVE_H *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->nSamplesPerSec = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_WAVE_H_nSamplesPerSec_get(void * jarg1) {
  unsigned short jresult ;
  WAVE_H *arg1 = (WAVE_H *) 0 ;
  uint16_t result;
  
  arg1 = (WAVE_H *)jarg1; 
  result = (uint16_t) ((arg1)->nSamplesPerSec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WAVE_H_nAvgBytesPerSec_set(void * jarg1, unsigned int jarg2) {
  WAVE_H *arg1 = (WAVE_H *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (WAVE_H *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->nAvgBytesPerSec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WAVE_H_nAvgBytesPerSec_get(void * jarg1) {
  unsigned int jresult ;
  WAVE_H *arg1 = (WAVE_H *) 0 ;
  uint32_t result;
  
  arg1 = (WAVE_H *)jarg1; 
  result = (uint32_t) ((arg1)->nAvgBytesPerSec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WAVE_H_nBlockAlign_set(void * jarg1, unsigned short jarg2) {
  WAVE_H *arg1 = (WAVE_H *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (WAVE_H *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->nBlockAlign = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_WAVE_H_nBlockAlign_get(void * jarg1) {
  unsigned short jresult ;
  WAVE_H *arg1 = (WAVE_H *) 0 ;
  uint16_t result;
  
  arg1 = (WAVE_H *)jarg1; 
  result = (uint16_t) ((arg1)->nBlockAlign);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WAVE_H_wBitsPerSample_set(void * jarg1, unsigned short jarg2) {
  WAVE_H *arg1 = (WAVE_H *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (WAVE_H *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->wBitsPerSample = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_WAVE_H_wBitsPerSample_get(void * jarg1) {
  unsigned short jresult ;
  WAVE_H *arg1 = (WAVE_H *) 0 ;
  uint16_t result;
  
  arg1 = (WAVE_H *)jarg1; 
  result = (uint16_t) ((arg1)->wBitsPerSample);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WAVE_H() {
  void * jresult ;
  WAVE_H *result = 0 ;
  
  {
    try {
      result = (WAVE_H *)new WAVE_H();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WAVE_H(void * jarg1) {
  WAVE_H *arg1 = (WAVE_H *) 0 ;
  
  arg1 = (WAVE_H *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WAVE_H_PCM_header_set(void * jarg1, void * jarg2) {
  WAVE_H_PCM *arg1 = (WAVE_H_PCM *) 0 ;
  WAVE_H *arg2 = (WAVE_H *) 0 ;
  
  arg1 = (WAVE_H_PCM *)jarg1; 
  arg2 = (WAVE_H *)jarg2; 
  if (arg1) (arg1)->header = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WAVE_H_PCM_header_get(void * jarg1) {
  void * jresult ;
  WAVE_H_PCM *arg1 = (WAVE_H_PCM *) 0 ;
  WAVE_H *result = 0 ;
  
  arg1 = (WAVE_H_PCM *)jarg1; 
  result = (WAVE_H *)& ((arg1)->header);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WAVE_H_PCM_chunks_set(void * jarg1, void * jarg2) {
  WAVE_H_PCM *arg1 = (WAVE_H_PCM *) 0 ;
  WAVE_CHUNK *arg2 = (WAVE_CHUNK *) 0 ;
  
  arg1 = (WAVE_H_PCM *)jarg1; 
  arg2 = (WAVE_CHUNK *)jarg2; 
  if (arg1) (arg1)->chunks = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WAVE_H_PCM_chunks_get(void * jarg1) {
  void * jresult ;
  WAVE_H_PCM *arg1 = (WAVE_H_PCM *) 0 ;
  WAVE_CHUNK *result = 0 ;
  
  arg1 = (WAVE_H_PCM *)jarg1; 
  result = (WAVE_CHUNK *) ((arg1)->chunks);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WAVE_H_PCM() {
  void * jresult ;
  WAVE_H_PCM *result = 0 ;
  
  {
    try {
      result = (WAVE_H_PCM *)new WAVE_H_PCM();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WAVE_H_PCM(void * jarg1) {
  WAVE_H_PCM *arg1 = (WAVE_H_PCM *) 0 ;
  
  arg1 = (WAVE_H_PCM *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WAVE_MEDIASUBTYPE_PCM_get() {
  void * jresult ;
  unsigned char *result = 0 ;
  
  result = (unsigned char *)(unsigned char *)WAVE_MEDIASUBTYPE_PCM;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WAVE_H_EXTENDED_header_set(void * jarg1, void * jarg2) {
  WAVE_H_EXTENDED *arg1 = (WAVE_H_EXTENDED *) 0 ;
  WAVE_H *arg2 = (WAVE_H *) 0 ;
  
  arg1 = (WAVE_H_EXTENDED *)jarg1; 
  arg2 = (WAVE_H *)jarg2; 
  if (arg1) (arg1)->header = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WAVE_H_EXTENDED_header_get(void * jarg1) {
  void * jresult ;
  WAVE_H_EXTENDED *arg1 = (WAVE_H_EXTENDED *) 0 ;
  WAVE_H *result = 0 ;
  
  arg1 = (WAVE_H_EXTENDED *)jarg1; 
  result = (WAVE_H *)& ((arg1)->header);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WAVE_H_EXTENDED_cbSizeExtension_set(void * jarg1, unsigned short jarg2) {
  WAVE_H_EXTENDED *arg1 = (WAVE_H_EXTENDED *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (WAVE_H_EXTENDED *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->cbSizeExtension = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_WAVE_H_EXTENDED_cbSizeExtension_get(void * jarg1) {
  unsigned short jresult ;
  WAVE_H_EXTENDED *arg1 = (WAVE_H_EXTENDED *) 0 ;
  uint16_t result;
  
  arg1 = (WAVE_H_EXTENDED *)jarg1; 
  result = (uint16_t) ((arg1)->cbSizeExtension);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WAVE_H_EXTENDED_wValidBitsPerSample_set(void * jarg1, unsigned short jarg2) {
  WAVE_H_EXTENDED *arg1 = (WAVE_H_EXTENDED *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (WAVE_H_EXTENDED *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->wValidBitsPerSample = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_WAVE_H_EXTENDED_wValidBitsPerSample_get(void * jarg1) {
  unsigned short jresult ;
  WAVE_H_EXTENDED *arg1 = (WAVE_H_EXTENDED *) 0 ;
  uint16_t result;
  
  arg1 = (WAVE_H_EXTENDED *)jarg1; 
  result = (uint16_t) ((arg1)->wValidBitsPerSample);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WAVE_H_EXTENDED_dwChannelMask_set(void * jarg1, unsigned int jarg2) {
  WAVE_H_EXTENDED *arg1 = (WAVE_H_EXTENDED *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (WAVE_H_EXTENDED *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->dwChannelMask = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WAVE_H_EXTENDED_dwChannelMask_get(void * jarg1) {
  unsigned int jresult ;
  WAVE_H_EXTENDED *arg1 = (WAVE_H_EXTENDED *) 0 ;
  uint32_t result;
  
  arg1 = (WAVE_H_EXTENDED *)jarg1; 
  result = (uint32_t) ((arg1)->dwChannelMask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WAVE_H_EXTENDED_SubFormat_set(void * jarg1, char * jarg2) {
  WAVE_H_EXTENDED *arg1 = (WAVE_H_EXTENDED *) 0 ;
  char *arg2 ;
  
  arg1 = (WAVE_H_EXTENDED *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->SubFormat, (const char *)arg2, 16-1);
      arg1->SubFormat[16-1] = 0;
    } else {
      arg1->SubFormat[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_WAVE_H_EXTENDED_SubFormat_get(void * jarg1) {
  char * jresult ;
  WAVE_H_EXTENDED *arg1 = (WAVE_H_EXTENDED *) 0 ;
  char *result = 0 ;
  
  arg1 = (WAVE_H_EXTENDED *)jarg1; 
  result = (char *)(char *) ((arg1)->SubFormat);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WAVE_H_EXTENDED_chunks_set(void * jarg1, void * jarg2) {
  WAVE_H_EXTENDED *arg1 = (WAVE_H_EXTENDED *) 0 ;
  WAVE_CHUNK *arg2 = (WAVE_CHUNK *) 0 ;
  
  arg1 = (WAVE_H_EXTENDED *)jarg1; 
  arg2 = (WAVE_CHUNK *)jarg2; 
  if (arg1) (arg1)->chunks = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WAVE_H_EXTENDED_chunks_get(void * jarg1) {
  void * jresult ;
  WAVE_H_EXTENDED *arg1 = (WAVE_H_EXTENDED *) 0 ;
  WAVE_CHUNK *result = 0 ;
  
  arg1 = (WAVE_H_EXTENDED *)jarg1; 
  result = (WAVE_CHUNK *) ((arg1)->chunks);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WAVE_H_EXTENDED() {
  void * jresult ;
  WAVE_H_EXTENDED *result = 0 ;
  
  {
    try {
      result = (WAVE_H_EXTENDED *)new WAVE_H_EXTENDED();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WAVE_H_EXTENDED(void * jarg1) {
  WAVE_H_EXTENDED *arg1 = (WAVE_H_EXTENDED *) 0 ;
  
  arg1 = (WAVE_H_EXTENDED *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_memblock_p_set(void * jarg1, unsigned int jarg2) {
  memblock *arg1 = (memblock *) 0 ;
  uintptr_t arg2 ;
  
  arg1 = (memblock *)jarg1; 
  arg2 = (uintptr_t)jarg2; 
  if (arg1) (arg1)->p = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_memblock_p_get(void * jarg1) {
  unsigned int jresult ;
  memblock *arg1 = (memblock *) 0 ;
  uintptr_t result;
  
  arg1 = (memblock *)jarg1; 
  result = (uintptr_t) ((arg1)->p);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_memblock_nBytes_set(void * jarg1, unsigned int jarg2) {
  memblock *arg1 = (memblock *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (memblock *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->nBytes = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_memblock_nBytes_get(void * jarg1) {
  unsigned int jresult ;
  memblock *arg1 = (memblock *) 0 ;
  unsigned int result;
  
  arg1 = (memblock *)jarg1; 
  result = (unsigned int) ((arg1)->nBytes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_memblock() {
  void * jresult ;
  memblock *result = 0 ;
  
  {
    try {
      result = (memblock *)new memblock();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_memblock(void * jarg1) {
  memblock *arg1 = (memblock *) 0 ;
  
  arg1 = (memblock *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Stereo__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  WAVE_H *arg1 = (WAVE_H *) 0 ;
  memblock arg2 ;
  memblock *argp2 ;
  Stereo *result = 0 ;
  
  arg1 = (WAVE_H *)jarg1; 
  argp2 = (memblock *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null memblock", 0);
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (Stereo *)new Stereo(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Stereo__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  WAVE_H *arg1 = (WAVE_H *) 0 ;
  memblock arg2 ;
  memblock arg3 ;
  memblock *argp2 ;
  memblock *argp3 ;
  Stereo *result = 0 ;
  
  arg1 = (WAVE_H *)jarg1; 
  argp2 = (memblock *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null memblock", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (memblock *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null memblock", 0);
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (Stereo *)new Stereo(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Stereo__SWIG_2(int jarg1, int jarg2, int jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  memblock arg4 ;
  memblock arg5 ;
  memblock *argp4 ;
  memblock *argp5 ;
  Stereo *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (memblock *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null memblock", 0);
    return 0;
  }
  arg4 = *argp4; 
  argp5 = (memblock *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null memblock", 0);
    return 0;
  }
  arg5 = *argp5; 
  {
    try {
      result = (Stereo *)new Stereo(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Stereo_next(void * jarg1) {
  unsigned int jresult ;
  Stereo *arg1 = (Stereo *) 0 ;
  bool result;
  
  arg1 = (Stereo *)jarg1; 
  {
    try {
      result = (bool)(arg1)->next();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Stereo_prev(void * jarg1) {
  unsigned int jresult ;
  Stereo *arg1 = (Stereo *) 0 ;
  bool result;
  
  arg1 = (Stereo *)jarg1; 
  {
    try {
      result = (bool)(arg1)->prev();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Stereo_reset(void * jarg1) {
  Stereo *arg1 = (Stereo *) 0 ;
  
  arg1 = (Stereo *)jarg1; 
  {
    try {
      (arg1)->reset();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_Stereo_getIndex(void * jarg1) {
  unsigned long long jresult ;
  Stereo *arg1 = (Stereo *) 0 ;
  uint64_t result;
  
  arg1 = (Stereo *)jarg1; 
  {
    try {
      result = (uint64_t)((Stereo const *)arg1)->getIndex();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_Stereo_getnSamples(void * jarg1) {
  unsigned long long jresult ;
  Stereo *arg1 = (Stereo *) 0 ;
  uint64_t result;
  
  arg1 = (Stereo *)jarg1; 
  {
    try {
      result = (uint64_t)((Stereo const *)arg1)->getnSamples();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Stereo_getnSamplesPerSec(void * jarg1) {
  int jresult ;
  Stereo *arg1 = (Stereo *) 0 ;
  int result;
  
  arg1 = (Stereo *)jarg1; 
  {
    try {
      result = (int)((Stereo const *)arg1)->getnSamplesPerSec();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Stereo_getLeft(void * jarg1) {
  int jresult ;
  Stereo *arg1 = (Stereo *) 0 ;
  int32_t result;
  
  arg1 = (Stereo *)jarg1; 
  {
    try {
      result = (int32_t)(arg1)->getLeft();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Stereo_getRight(void * jarg1) {
  int jresult ;
  Stereo *arg1 = (Stereo *) 0 ;
  int32_t result;
  
  arg1 = (Stereo *)jarg1; 
  {
    try {
      result = (int32_t)(arg1)->getRight();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Stereo_getAvg(void * jarg1) {
  int jresult ;
  Stereo *arg1 = (Stereo *) 0 ;
  int32_t result;
  
  arg1 = (Stereo *)jarg1; 
  {
    try {
      result = (int32_t)(arg1)->getAvg();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Stereo_setLeft(void * jarg1, int jarg2) {
  int jresult ;
  Stereo *arg1 = (Stereo *) 0 ;
  int32_t arg2 ;
  int32_t result;
  
  arg1 = (Stereo *)jarg1; 
  arg2 = (int32_t)jarg2; 
  {
    try {
      result = (int32_t)(arg1)->setLeft(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Stereo_setRight(void * jarg1, int jarg2) {
  int jresult ;
  Stereo *arg1 = (Stereo *) 0 ;
  int32_t arg2 ;
  int32_t result;
  
  arg1 = (Stereo *)jarg1; 
  arg2 = (int32_t)jarg2; 
  {
    try {
      result = (int32_t)(arg1)->setRight(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Stereo_setAvg(void * jarg1, int jarg2) {
  int jresult ;
  Stereo *arg1 = (Stereo *) 0 ;
  int32_t arg2 ;
  int32_t result;
  
  arg1 = (Stereo *)jarg1; 
  arg2 = (int32_t)jarg2; 
  {
    try {
      result = (int32_t)(arg1)->setAvg(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Stereo_maxAmp(void * jarg1) {
  int jresult ;
  Stereo *arg1 = (Stereo *) 0 ;
  int32_t result;
  
  arg1 = (Stereo *)jarg1; 
  {
    try {
      result = (int32_t)((Stereo const *)arg1)->maxAmp();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Stereo_scale(void * jarg1, int jarg2) {
  double jresult ;
  Stereo *arg1 = (Stereo *) 0 ;
  int32_t arg2 ;
  double result;
  
  arg1 = (Stereo *)jarg1; 
  arg2 = (int32_t)jarg2; 
  {
    try {
      result = (double)((Stereo const *)arg1)->scale(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Stereo(void * jarg1) {
  Stereo *arg1 = (Stereo *) 0 ;
  
  arg1 = (Stereo *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DFTransform_DFTChannelResult_k_set(void * jarg1, int jarg2) {
  DFTransform::DFTChannelResult *arg1 = (DFTransform::DFTChannelResult *) 0 ;
  int arg2 ;
  
  arg1 = (DFTransform::DFTChannelResult *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->k = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DFTransform_DFTChannelResult_k_get(void * jarg1) {
  int jresult ;
  DFTransform::DFTChannelResult *arg1 = (DFTransform::DFTChannelResult *) 0 ;
  int result;
  
  arg1 = (DFTransform::DFTChannelResult *)jarg1; 
  result = (int) ((arg1)->k);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DFTransform_DFTChannelResult_real_set(void * jarg1, double jarg2) {
  DFTransform::DFTChannelResult *arg1 = (DFTransform::DFTChannelResult *) 0 ;
  double arg2 ;
  
  arg1 = (DFTransform::DFTChannelResult *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->real = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DFTransform_DFTChannelResult_real_get(void * jarg1) {
  double jresult ;
  DFTransform::DFTChannelResult *arg1 = (DFTransform::DFTChannelResult *) 0 ;
  double result;
  
  arg1 = (DFTransform::DFTChannelResult *)jarg1; 
  result = (double) ((arg1)->real);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DFTransform_DFTChannelResult_imag_set(void * jarg1, double jarg2) {
  DFTransform::DFTChannelResult *arg1 = (DFTransform::DFTChannelResult *) 0 ;
  double arg2 ;
  
  arg1 = (DFTransform::DFTChannelResult *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->imag = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DFTransform_DFTChannelResult_imag_get(void * jarg1) {
  double jresult ;
  DFTransform::DFTChannelResult *arg1 = (DFTransform::DFTChannelResult *) 0 ;
  double result;
  
  arg1 = (DFTransform::DFTChannelResult *)jarg1; 
  result = (double) ((arg1)->imag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DFTransform_DFTChannelResult_freq_set(void * jarg1, double jarg2) {
  DFTransform::DFTChannelResult *arg1 = (DFTransform::DFTChannelResult *) 0 ;
  double arg2 ;
  
  arg1 = (DFTransform::DFTChannelResult *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->freq = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DFTransform_DFTChannelResult_freq_get(void * jarg1) {
  double jresult ;
  DFTransform::DFTChannelResult *arg1 = (DFTransform::DFTChannelResult *) 0 ;
  double result;
  
  arg1 = (DFTransform::DFTChannelResult *)jarg1; 
  result = (double) ((arg1)->freq);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DFTransform_DFTChannelResult_mag_set(void * jarg1, double jarg2) {
  DFTransform::DFTChannelResult *arg1 = (DFTransform::DFTChannelResult *) 0 ;
  double arg2 ;
  
  arg1 = (DFTransform::DFTChannelResult *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->mag = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DFTransform_DFTChannelResult_mag_get(void * jarg1) {
  double jresult ;
  DFTransform::DFTChannelResult *arg1 = (DFTransform::DFTChannelResult *) 0 ;
  double result;
  
  arg1 = (DFTransform::DFTChannelResult *)jarg1; 
  result = (double) ((arg1)->mag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DFTransform_DFTChannelResult_angle_set(void * jarg1, double jarg2) {
  DFTransform::DFTChannelResult *arg1 = (DFTransform::DFTChannelResult *) 0 ;
  double arg2 ;
  
  arg1 = (DFTransform::DFTChannelResult *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->angle = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DFTransform_DFTChannelResult_angle_get(void * jarg1) {
  double jresult ;
  DFTransform::DFTChannelResult *arg1 = (DFTransform::DFTChannelResult *) 0 ;
  double result;
  
  arg1 = (DFTransform::DFTChannelResult *)jarg1; 
  result = (double) ((arg1)->angle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DFTransform_DFTChannelResult_dbmag_set(void * jarg1, double jarg2) {
  DFTransform::DFTChannelResult *arg1 = (DFTransform::DFTChannelResult *) 0 ;
  double arg2 ;
  
  arg1 = (DFTransform::DFTChannelResult *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->dbmag = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DFTransform_DFTChannelResult_dbmag_get(void * jarg1) {
  double jresult ;
  DFTransform::DFTChannelResult *arg1 = (DFTransform::DFTChannelResult *) 0 ;
  double result;
  
  arg1 = (DFTransform::DFTChannelResult *)jarg1; 
  result = (double) ((arg1)->dbmag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DFTransform_DFTChannelResult() {
  void * jresult ;
  DFTransform::DFTChannelResult *result = 0 ;
  
  {
    try {
      result = (DFTransform::DFTChannelResult *)new DFTransform::DFTChannelResult();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DFTransform_DFTChannelResult(void * jarg1) {
  DFTransform::DFTChannelResult *arg1 = (DFTransform::DFTChannelResult *) 0 ;
  
  arg1 = (DFTransform::DFTChannelResult *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DFTransform_DFTResult_left_set(void * jarg1, void * jarg2) {
  DFTransform::DFTResult *arg1 = (DFTransform::DFTResult *) 0 ;
  DFTransform::DFTChannelResult *arg2 = (DFTransform::DFTChannelResult *) 0 ;
  
  arg1 = (DFTransform::DFTResult *)jarg1; 
  arg2 = (DFTransform::DFTChannelResult *)jarg2; 
  if (arg1) (arg1)->left = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DFTransform_DFTResult_left_get(void * jarg1) {
  void * jresult ;
  DFTransform::DFTResult *arg1 = (DFTransform::DFTResult *) 0 ;
  DFTransform::DFTChannelResult *result = 0 ;
  
  arg1 = (DFTransform::DFTResult *)jarg1; 
  result = (DFTransform::DFTChannelResult *)& ((arg1)->left);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DFTransform_DFTResult_right_set(void * jarg1, void * jarg2) {
  DFTransform::DFTResult *arg1 = (DFTransform::DFTResult *) 0 ;
  DFTransform::DFTChannelResult *arg2 = (DFTransform::DFTChannelResult *) 0 ;
  
  arg1 = (DFTransform::DFTResult *)jarg1; 
  arg2 = (DFTransform::DFTChannelResult *)jarg2; 
  if (arg1) (arg1)->right = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DFTransform_DFTResult_right_get(void * jarg1) {
  void * jresult ;
  DFTransform::DFTResult *arg1 = (DFTransform::DFTResult *) 0 ;
  DFTransform::DFTChannelResult *result = 0 ;
  
  arg1 = (DFTransform::DFTResult *)jarg1; 
  result = (DFTransform::DFTChannelResult *)& ((arg1)->right);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DFTransform_DFTResult_stereo_set(void * jarg1, void * jarg2) {
  DFTransform::DFTResult *arg1 = (DFTransform::DFTResult *) 0 ;
  DFTransform::DFTChannelResult *arg2 = (DFTransform::DFTChannelResult *) 0 ;
  
  arg1 = (DFTransform::DFTResult *)jarg1; 
  arg2 = (DFTransform::DFTChannelResult *)jarg2; 
  if (arg1) (arg1)->stereo = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DFTransform_DFTResult_stereo_get(void * jarg1) {
  void * jresult ;
  DFTransform::DFTResult *arg1 = (DFTransform::DFTResult *) 0 ;
  DFTransform::DFTChannelResult *result = 0 ;
  
  arg1 = (DFTransform::DFTResult *)jarg1; 
  result = (DFTransform::DFTChannelResult *)& ((arg1)->stereo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DFTransform_DFTResult() {
  void * jresult ;
  DFTransform::DFTResult *result = 0 ;
  
  {
    try {
      result = (DFTransform::DFTResult *)new DFTransform::DFTResult();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DFTransform_DFTResult(void * jarg1) {
  DFTransform::DFTResult *arg1 = (DFTransform::DFTResult *) 0 ;
  
  arg1 = (DFTransform::DFTResult *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DFTransform(void * jarg1, int jarg2) {
  void * jresult ;
  Stereo *arg1 = 0 ;
  int arg2 ;
  DFTransform *result = 0 ;
  
  arg1 = (Stereo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Stereo & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  {
    try {
      result = (DFTransform *)new DFTransform(*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DFTransform(void * jarg1) {
  DFTransform *arg1 = (DFTransform *) 0 ;
  
  arg1 = (DFTransform *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DFTransform_hasNext(void * jarg1) {
  unsigned int jresult ;
  DFTransform *arg1 = (DFTransform *) 0 ;
  bool result;
  
  arg1 = (DFTransform *)jarg1; 
  {
    try {
      result = (bool)((DFTransform const *)arg1)->hasNext();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DFTransform_next__SWIG_0(void * jarg1) {
  void * jresult ;
  DFTransform *arg1 = (DFTransform *) 0 ;
  DFTransform::DFTResult *result = 0 ;
  
  arg1 = (DFTransform *)jarg1; 
  {
    try {
      result = (DFTransform::DFTResult *)(arg1)->next();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DFTransform_next__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  DFTransform *arg1 = (DFTransform *) 0 ;
  DFTransform::nextResult arg2 ;
  DFTransform::DFTResult *result = 0 ;
  
  arg1 = (DFTransform *)jarg1; 
  arg2 = (DFTransform::nextResult)jarg2; 
  {
    try {
      result = (DFTransform::DFTResult *)(arg1)->next(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_DFTransform_getnSamples(void * jarg1) {
  unsigned long long jresult ;
  DFTransform *arg1 = (DFTransform *) 0 ;
  uint64_t result;
  
  arg1 = (DFTransform *)jarg1; 
  {
    try {
      result = (uint64_t)((DFTransform const *)arg1)->getnSamples();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FFTransform(void * jarg1, int jarg2) {
  void * jresult ;
  Stereo *arg1 = 0 ;
  int arg2 ;
  FFTransform *result = 0 ;
  
  arg1 = (Stereo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Stereo & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  {
    try {
      result = (FFTransform *)new FFTransform(*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FFTransform(void * jarg1) {
  FFTransform *arg1 = (FFTransform *) 0 ;
  
  arg1 = (FFTransform *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FFTransform_ComplexFFT__SWIG_0(void * jarg1) {
  std::valarray< std::complex< double > > *arg1 = 0 ;
  
  arg1 = (std::valarray< std::complex< double > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::valarray< std::complex< double > > & type is null", 0);
    return ;
  } 
  {
    try {
      FFTransform::ComplexFFT(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FFTransform_ComplexFFT__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5) {
  double *arg1 ;
  double *arg2 ;
  int arg3 ;
  double *arg4 ;
  double *arg5 ;
  
  arg1 = (double *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double *)jarg4; 
  arg5 = (double *)jarg5; 
  {
    try {
      FFTransform::ComplexFFT(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FFTransform_hasNext(void * jarg1) {
  unsigned int jresult ;
  FFTransform *arg1 = (FFTransform *) 0 ;
  bool result;
  
  arg1 = (FFTransform *)jarg1; 
  {
    try {
      result = (bool)((FFTransform const *)arg1)->hasNext();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FFTransform_next__SWIG_0(void * jarg1) {
  void * jresult ;
  FFTransform *arg1 = (FFTransform *) 0 ;
  DFTransform::DFTResult *result = 0 ;
  
  arg1 = (FFTransform *)jarg1; 
  {
    try {
      result = (DFTransform::DFTResult *)(arg1)->next();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FFTransform_next__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  FFTransform *arg1 = (FFTransform *) 0 ;
  FFTransform::nextResult arg2 ;
  DFTransform::DFTResult *result = 0 ;
  
  arg1 = (FFTransform *)jarg1; 
  arg2 = (FFTransform::nextResult)jarg2; 
  {
    try {
      result = (DFTransform::DFTResult *)(arg1)->next(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Wave__SWIG_0() {
  void * jresult ;
  Wave *result = 0 ;
  
  {
    try {
      result = (Wave *)new Wave();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Wave__SWIG_1(char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  Wave *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  {
    try {
      result = (Wave *)new Wave(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Wave__SWIG_2(void * jarg1, int jarg2) {
  void * jresult ;
  BYTE *arg1 ;
  int arg2 ;
  Wave *result = 0 ;
  
  arg1 = (BYTE *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (Wave *)new Wave(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Wave(void * jarg1) {
  Wave *arg1 = (Wave *) 0 ;
  
  arg1 = (Wave *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Wave_getH(void * jarg1) {
  void * jresult ;
  Wave *arg1 = (Wave *) 0 ;
  WAVE_H *result = 0 ;
  
  arg1 = (Wave *)jarg1; 
  {
    try {
      result = (WAVE_H *)(arg1)->getH();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Wave_get_data_p(void * jarg1) {
  unsigned int jresult ;
  Wave *arg1 = (Wave *) 0 ;
  uintptr_t result;
  
  arg1 = (Wave *)jarg1; 
  {
    try {
      result = (uintptr_t)(arg1)->get_data_p();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Wave_get_data_size(void * jarg1) {
  int jresult ;
  Wave *arg1 = (Wave *) 0 ;
  int result;
  
  arg1 = (Wave *)jarg1; 
  {
    try {
      result = (int)(arg1)->get_data_size();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Wave_hasNext__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  Wave *arg1 = (Wave *) 0 ;
  bool result;
  
  arg1 = (Wave *)jarg1; 
  {
    try {
      result = (bool)(arg1)->hasNext();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Wave_hasNext__SWIG_1(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Wave *arg1 = (Wave *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Wave *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (bool)(arg1)->hasNext(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Wave_next__SWIG_0(void * jarg1) {
  void * jresult ;
  Wave *arg1 = (Wave *) 0 ;
  memblock *result = 0 ;
  
  arg1 = (Wave *)jarg1; 
  {
    try {
      result = (memblock *)(arg1)->next();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Wave_next__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  Wave *arg1 = (Wave *) 0 ;
  int arg2 ;
  memblock *result = 0 ;
  
  arg1 = (Wave *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (memblock *)(arg1)->next(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Wave_getLastNextResult(void * jarg1) {
  void * jresult ;
  Wave *arg1 = (Wave *) 0 ;
  memblock *result = 0 ;
  
  arg1 = (Wave *)jarg1; 
  {
    try {
      result = (memblock *)(arg1)->getLastNextResult();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Wave_DFT(void * jarg1, void * jarg2) {
  void * jresult ;
  Wave *arg1 = (Wave *) 0 ;
  memblock *arg2 = 0 ;
  DFTransform *result = 0 ;
  
  arg1 = (Wave *)jarg1; 
  arg2 = (memblock *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "memblock & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (DFTransform *)(arg1)->DFT(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Wave_FFT(void * jarg1, void * jarg2) {
  void * jresult ;
  Wave *arg1 = (Wave *) 0 ;
  memblock *arg2 = 0 ;
  FFTransform *result = 0 ;
  
  arg1 = (Wave *)jarg1; 
  arg2 = (memblock *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "memblock & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (FFTransform *)(arg1)->FFT(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Wave_getStereoObject(void * jarg1, void * jarg2) {
  void * jresult ;
  Wave *arg1 = (Wave *) 0 ;
  memblock *arg2 = 0 ;
  Stereo *result = 0 ;
  
  arg1 = (Wave *)jarg1; 
  arg2 = (memblock *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "memblock & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (Stereo *)(arg1)->getStereoObject(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Wave_DFTWindow(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  Wave *arg1 = (Wave *) 0 ;
  memblock *arg2 = 0 ;
  Wave::DFTWindowType arg3 ;
  memblock *result = 0 ;
  
  arg1 = (Wave *)jarg1; 
  arg2 = (memblock *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "memblock & type is null", 0);
    return 0;
  } 
  arg3 = (Wave::DFTWindowType)jarg3; 
  {
    try {
      result = (memblock *) &(arg1)->DFTWindow(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Wave_nSamplesPerSec(void * jarg1) {
  int jresult ;
  Wave *arg1 = (Wave *) 0 ;
  int result;
  
  arg1 = (Wave *)jarg1; 
  {
    try {
      result = (int)(arg1)->nSamplesPerSec();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Wave_detectBPM(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5) {
  int jresult ;
  Wave *arg1 = (Wave *) 0 ;
  memblock *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  arg1 = (Wave *)jarg1; 
  arg2 = (memblock *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "memblock & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  {
    try {
      result = (int)(arg1)->detectBPM(*arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Wave_getWaveFormatEx(void * jarg1) {
  void * jresult ;
  Wave *arg1 = (Wave *) 0 ;
  WAVEFORMATEX result;
  
  arg1 = (Wave *)jarg1; 
  {
    try {
      result = (arg1)->getWaveFormatEx();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new WAVEFORMATEX((const WAVEFORMATEX &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Wave_getWaveFormatExtensible(void * jarg1) {
  void * jresult ;
  Wave *arg1 = (Wave *) 0 ;
  WAVEFORMATEXTENSIBLE result;
  
  arg1 = (Wave *)jarg1; 
  {
    try {
      result = (arg1)->getWaveFormatExtensible();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new WAVEFORMATEXTENSIBLE((const WAVEFORMATEXTENSIBLE &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Wave_isExtendedWave(void * jarg1) {
  unsigned int jresult ;
  Wave *arg1 = (Wave *) 0 ;
  bool result;
  
  arg1 = (Wave *)jarg1; 
  {
    try {
      result = (bool)(arg1)->isExtendedWave();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Wave_reset(void * jarg1) {
  Wave *arg1 = (Wave *) 0 ;
  
  arg1 = (Wave *)jarg1; 
  {
    try {
      (arg1)->reset();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_Wave_correlation(void * jarg1, void * jarg2, void * jarg3) {
  double jresult ;
  Wave *arg1 = (Wave *) 0 ;
  memblock *arg2 = 0 ;
  memblock *arg3 = 0 ;
  double result;
  
  arg1 = (Wave *)jarg1; 
  arg2 = (memblock *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "memblock & type is null", 0);
    return 0;
  } 
  arg3 = (memblock *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "memblock & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->correlation(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StatBeatDetection__SWIG_0(void * jarg1, unsigned long long jarg2, unsigned long long jarg3) {
  void * jresult ;
  Wave *arg1 = 0 ;
  REFERENCE_TIME arg2 ;
  REFERENCE_TIME arg3 ;
  StatBeatDetection *result = 0 ;
  
  arg1 = (Wave *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Wave & type is null", 0);
    return 0;
  } 
  arg2 = (REFERENCE_TIME)jarg2; 
  arg3 = (REFERENCE_TIME)jarg3; 
  {
    try {
      result = (StatBeatDetection *)new StatBeatDetection(*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StatBeatDetection__SWIG_1(void * jarg1, unsigned long long jarg2) {
  void * jresult ;
  Wave *arg1 = 0 ;
  REFERENCE_TIME arg2 ;
  StatBeatDetection *result = 0 ;
  
  arg1 = (Wave *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Wave & type is null", 0);
    return 0;
  } 
  arg2 = (REFERENCE_TIME)jarg2; 
  {
    try {
      result = (StatBeatDetection *)new StatBeatDetection(*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StatBeatDetection__SWIG_2(void * jarg1) {
  void * jresult ;
  Wave *arg1 = 0 ;
  StatBeatDetection *result = 0 ;
  
  arg1 = (Wave *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Wave & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (StatBeatDetection *)new StatBeatDetection(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StatBeatDetection(void * jarg1) {
  StatBeatDetection *arg1 = (StatBeatDetection *) 0 ;
  
  arg1 = (StatBeatDetection *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBeatDetection_release(void * jarg1) {
  StatBeatDetection *arg1 = (StatBeatDetection *) 0 ;
  
  arg1 = (StatBeatDetection *)jarg1; 
  {
    try {
      (arg1)->release();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBeatDetection_length(void * jarg1) {
  int jresult ;
  StatBeatDetection *arg1 = (StatBeatDetection *) 0 ;
  int result;
  
  arg1 = (StatBeatDetection *)jarg1; 
  {
    try {
      result = (int)((StatBeatDetection const *)arg1)->length();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBeatDetection_hasNext(void * jarg1) {
  unsigned int jresult ;
  StatBeatDetection *arg1 = (StatBeatDetection *) 0 ;
  bool result;
  
  arg1 = (StatBeatDetection *)jarg1; 
  {
    try {
      result = (bool)((StatBeatDetection const *)arg1)->hasNext();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_StatBeatDetection_next(void * jarg1) {
  double jresult ;
  StatBeatDetection *arg1 = (StatBeatDetection *) 0 ;
  double result;
  
  arg1 = (StatBeatDetection *)jarg1; 
  {
    try {
      result = (double)(arg1)->next();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBeatDetection_getPrecision(void * jarg1) {
  int jresult ;
  StatBeatDetection *arg1 = (StatBeatDetection *) 0 ;
  int result;
  
  arg1 = (StatBeatDetection *)jarg1; 
  {
    try {
      result = (int)((StatBeatDetection const *)arg1)->getPrecision();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Audio(void * jarg1, unsigned long long jarg2) {
  void * jresult ;
  Wave *arg1 = 0 ;
  REFERENCE_TIME arg2 ;
  WASAPI::Audio *result = 0 ;
  
  arg1 = (Wave *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Wave & type is null", 0);
    return 0;
  } 
  arg2 = (REFERENCE_TIME)jarg2; 
  {
    try {
      result = (WASAPI::Audio *)new WASAPI::Audio(*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Audio(void * jarg1) {
  WASAPI::Audio *arg1 = (WASAPI::Audio *) 0 ;
  
  arg1 = (WASAPI::Audio *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_Audio_framesAvailable(void * jarg1) {
  int jresult ;
  WASAPI::Audio *arg1 = (WASAPI::Audio *) 0 ;
  int result;
  
  arg1 = (WASAPI::Audio *)jarg1; 
  {
    try {
      result = (int)(arg1)->framesAvailable();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Audio_fillBuffer__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  WASAPI::Audio *arg1 = (WASAPI::Audio *) 0 ;
  bool result;
  
  arg1 = (WASAPI::Audio *)jarg1; 
  {
    try {
      result = (bool)(arg1)->fillBuffer();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Audio_fillBuffer__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  WASAPI::Audio *arg1 = (WASAPI::Audio *) 0 ;
  memblock *arg2 = (memblock *) 0 ;
  bool result;
  
  arg1 = (WASAPI::Audio *)jarg1; 
  arg2 = (memblock *)jarg2; 
  {
    try {
      result = (bool)(arg1)->fillBuffer(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Audio_getChannelCount(void * jarg1) {
  unsigned int jresult ;
  WASAPI::Audio *arg1 = (WASAPI::Audio *) 0 ;
  uint32_t result;
  
  arg1 = (WASAPI::Audio *)jarg1; 
  {
    try {
      result = (uint32_t)(arg1)->getChannelCount();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Audio_getChannelVolume(void * jarg1, unsigned int jarg2) {
  float jresult ;
  WASAPI::Audio *arg1 = (WASAPI::Audio *) 0 ;
  uint32_t arg2 ;
  float result;
  
  arg1 = (WASAPI::Audio *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      result = (float)(arg1)->getChannelVolume(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Audio_setChannelVolume(void * jarg1, unsigned int jarg2, float jarg3) {
  WASAPI::Audio *arg1 = (WASAPI::Audio *) 0 ;
  uint32_t arg2 ;
  float arg3 ;
  
  arg1 = (WASAPI::Audio *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (float)jarg3; 
  {
    try {
      (arg1)->setChannelVolume(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT DFTransform * SWIGSTDCALL CSharp_FFTransform_SWIGUpcast(FFTransform *jarg1) {
    return (DFTransform *)jarg1;
}

#ifdef __cplusplus
}
#endif

