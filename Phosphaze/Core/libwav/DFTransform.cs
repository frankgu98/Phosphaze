//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class DFTransform : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DFTransform(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DFTransform obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~DFTransform() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libwavPINVOKE.delete_DFTransform(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public class DFTChannelResult : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal DFTChannelResult(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DFTChannelResult obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~DFTChannelResult() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            libwavPINVOKE.delete_DFTransform_DFTChannelResult(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public int k {
      set {
        libwavPINVOKE.DFTransform_DFTChannelResult_k_set(swigCPtr, value);
        if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        int ret = libwavPINVOKE.DFTransform_DFTChannelResult_k_get(swigCPtr);
        if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public double real {
      set {
        libwavPINVOKE.DFTransform_DFTChannelResult_real_set(swigCPtr, value);
        if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        double ret = libwavPINVOKE.DFTransform_DFTChannelResult_real_get(swigCPtr);
        if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public double imag {
      set {
        libwavPINVOKE.DFTransform_DFTChannelResult_imag_set(swigCPtr, value);
        if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        double ret = libwavPINVOKE.DFTransform_DFTChannelResult_imag_get(swigCPtr);
        if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public double freq {
      set {
        libwavPINVOKE.DFTransform_DFTChannelResult_freq_set(swigCPtr, value);
        if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        double ret = libwavPINVOKE.DFTransform_DFTChannelResult_freq_get(swigCPtr);
        if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public double mag {
      set {
        libwavPINVOKE.DFTransform_DFTChannelResult_mag_set(swigCPtr, value);
        if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        double ret = libwavPINVOKE.DFTransform_DFTChannelResult_mag_get(swigCPtr);
        if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public double angle {
      set {
        libwavPINVOKE.DFTransform_DFTChannelResult_angle_set(swigCPtr, value);
        if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        double ret = libwavPINVOKE.DFTransform_DFTChannelResult_angle_get(swigCPtr);
        if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public double dbmag {
      set {
        libwavPINVOKE.DFTransform_DFTChannelResult_dbmag_set(swigCPtr, value);
        if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        double ret = libwavPINVOKE.DFTransform_DFTChannelResult_dbmag_get(swigCPtr);
        if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public DFTChannelResult() : this(libwavPINVOKE.new_DFTransform_DFTChannelResult(), true) {
      if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public class DFTResult : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal DFTResult(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DFTResult obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~DFTResult() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            libwavPINVOKE.delete_DFTransform_DFTResult(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public DFTransform.DFTChannelResult left {
      set {
        libwavPINVOKE.DFTransform_DFTResult_left_set(swigCPtr, DFTransform.DFTChannelResult.getCPtr(value));
        if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = libwavPINVOKE.DFTransform_DFTResult_left_get(swigCPtr);
        DFTransform.DFTChannelResult ret = (cPtr == global::System.IntPtr.Zero) ? null : new DFTransform.DFTChannelResult(cPtr, false);
        if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public DFTransform.DFTChannelResult right {
      set {
        libwavPINVOKE.DFTransform_DFTResult_right_set(swigCPtr, DFTransform.DFTChannelResult.getCPtr(value));
        if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = libwavPINVOKE.DFTransform_DFTResult_right_get(swigCPtr);
        DFTransform.DFTChannelResult ret = (cPtr == global::System.IntPtr.Zero) ? null : new DFTransform.DFTChannelResult(cPtr, false);
        if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public DFTransform.DFTChannelResult stereo {
      set {
        libwavPINVOKE.DFTransform_DFTResult_stereo_set(swigCPtr, DFTransform.DFTChannelResult.getCPtr(value));
        if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = libwavPINVOKE.DFTransform_DFTResult_stereo_get(swigCPtr);
        DFTransform.DFTChannelResult ret = (cPtr == global::System.IntPtr.Zero) ? null : new DFTransform.DFTChannelResult(cPtr, false);
        if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public DFTResult() : this(libwavPINVOKE.new_DFTransform_DFTResult(), true) {
      if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public DFTransform(Stereo stereo, int nSamplesPerSecond) : this(libwavPINVOKE.new_DFTransform(Stereo.getCPtr(stereo), nSamplesPerSecond), true) {
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool hasNext() {
    bool ret = libwavPINVOKE.DFTransform_hasNext(swigCPtr);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DFTransform.DFTResult next() {
    global::System.IntPtr cPtr = libwavPINVOKE.DFTransform_next__SWIG_0(swigCPtr);
    DFTransform.DFTResult ret = (cPtr == global::System.IntPtr.Zero) ? null : new DFTransform.DFTResult(cPtr, false);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DFTransform.DFTResult next(DFTransform.nextResult type) {
    global::System.IntPtr cPtr = libwavPINVOKE.DFTransform_next__SWIG_1(swigCPtr, (int)type);
    DFTransform.DFTResult ret = (cPtr == global::System.IntPtr.Zero) ? null : new DFTransform.DFTResult(cPtr, false);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ulong getnSamples() {
    ulong ret = libwavPINVOKE.DFTransform_getnSamples(swigCPtr);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum nextResult {
    LEFT,
    RIGHT,
    STEREO,
    ALL
  }

}
