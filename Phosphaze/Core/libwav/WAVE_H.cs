//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class WAVE_H : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal WAVE_H(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(WAVE_H obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~WAVE_H() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libwavPINVOKE.delete_WAVE_H(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public string RIFFTag {
    set {
      libwavPINVOKE.WAVE_H_RIFFTag_set(swigCPtr, value);
      if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libwavPINVOKE.WAVE_H_RIFFTag_get(swigCPtr);
      if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint fileLength {
    set {
      libwavPINVOKE.WAVE_H_fileLength_set(swigCPtr, value);
      if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = libwavPINVOKE.WAVE_H_fileLength_get(swigCPtr);
      if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string WAVETag {
    set {
      libwavPINVOKE.WAVE_H_WAVETag_set(swigCPtr, value);
      if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libwavPINVOKE.WAVE_H_WAVETag_get(swigCPtr);
      if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string fmt_Tag {
    set {
      libwavPINVOKE.WAVE_H_fmt_Tag_set(swigCPtr, value);
      if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libwavPINVOKE.WAVE_H_fmt_Tag_get(swigCPtr);
      if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint fmtSize {
    set {
      libwavPINVOKE.WAVE_H_fmtSize_set(swigCPtr, value);
      if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = libwavPINVOKE.WAVE_H_fmtSize_get(swigCPtr);
      if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ushort wFormatTag {
    set {
      libwavPINVOKE.WAVE_H_wFormatTag_set(swigCPtr, value);
      if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ushort ret = libwavPINVOKE.WAVE_H_wFormatTag_get(swigCPtr);
      if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ushort nChannels {
    set {
      libwavPINVOKE.WAVE_H_nChannels_set(swigCPtr, value);
      if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ushort ret = libwavPINVOKE.WAVE_H_nChannels_get(swigCPtr);
      if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ushort nSamplesPerSec {
    set {
      libwavPINVOKE.WAVE_H_nSamplesPerSec_set(swigCPtr, value);
      if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ushort ret = libwavPINVOKE.WAVE_H_nSamplesPerSec_get(swigCPtr);
      if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint nAvgBytesPerSec {
    set {
      libwavPINVOKE.WAVE_H_nAvgBytesPerSec_set(swigCPtr, value);
      if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = libwavPINVOKE.WAVE_H_nAvgBytesPerSec_get(swigCPtr);
      if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ushort nBlockAlign {
    set {
      libwavPINVOKE.WAVE_H_nBlockAlign_set(swigCPtr, value);
      if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ushort ret = libwavPINVOKE.WAVE_H_nBlockAlign_get(swigCPtr);
      if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ushort wBitsPerSample {
    set {
      libwavPINVOKE.WAVE_H_wBitsPerSample_set(swigCPtr, value);
      if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ushort ret = libwavPINVOKE.WAVE_H_wBitsPerSample_get(swigCPtr);
      if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public WAVE_H() : this(libwavPINVOKE.new_WAVE_H(), true) {
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
  }

}
