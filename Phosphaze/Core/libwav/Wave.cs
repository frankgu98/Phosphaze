//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Wave : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Wave(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Wave obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Wave() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libwavPINVOKE.delete_Wave(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Wave() : this(libwavPINVOKE.new_Wave__SWIG_0(), true) {
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
  }

  public Wave(string filename) : this(libwavPINVOKE.new_Wave__SWIG_1(filename), true) {
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
  }

  public Wave(SWIGTYPE_p_unsigned_char raw, int length) : this(libwavPINVOKE.new_Wave__SWIG_2(SWIGTYPE_p_unsigned_char.getCPtr(raw), length), true) {
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
  }

  public WAVE_H getH() {
    global::System.IntPtr cPtr = libwavPINVOKE.Wave_getH(swigCPtr);
    WAVE_H ret = (cPtr == global::System.IntPtr.Zero) ? null : new WAVE_H(cPtr, false);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint get_data_p() {
    uint ret = libwavPINVOKE.Wave_get_data_p(swigCPtr);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int get_data_size() {
    int ret = libwavPINVOKE.Wave_get_data_size(swigCPtr);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasNext() {
    bool ret = libwavPINVOKE.Wave_hasNext__SWIG_0(swigCPtr);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasNext(int nBlocks) {
    bool ret = libwavPINVOKE.Wave_hasNext__SWIG_1(swigCPtr, nBlocks);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public memblock next() {
    global::System.IntPtr cPtr = libwavPINVOKE.Wave_next__SWIG_0(swigCPtr);
    memblock ret = (cPtr == global::System.IntPtr.Zero) ? null : new memblock(cPtr, false);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public memblock next(int nBlocks) {
    global::System.IntPtr cPtr = libwavPINVOKE.Wave_next__SWIG_1(swigCPtr, nBlocks);
    memblock ret = (cPtr == global::System.IntPtr.Zero) ? null : new memblock(cPtr, false);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public memblock getLastNextResult() {
    global::System.IntPtr cPtr = libwavPINVOKE.Wave_getLastNextResult(swigCPtr);
    memblock ret = (cPtr == global::System.IntPtr.Zero) ? null : new memblock(cPtr, false);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DFTransform DFT(memblock m) {
    global::System.IntPtr cPtr = libwavPINVOKE.Wave_DFT(swigCPtr, memblock.getCPtr(m));
    DFTransform ret = (cPtr == global::System.IntPtr.Zero) ? null : new DFTransform(cPtr, false);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FFTransform FFT(memblock m) {
    global::System.IntPtr cPtr = libwavPINVOKE.Wave_FFT(swigCPtr, memblock.getCPtr(m));
    FFTransform ret = (cPtr == global::System.IntPtr.Zero) ? null : new FFTransform(cPtr, false);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Stereo getStereoObject(memblock m) {
    global::System.IntPtr cPtr = libwavPINVOKE.Wave_getStereoObject(swigCPtr, memblock.getCPtr(m));
    Stereo ret = (cPtr == global::System.IntPtr.Zero) ? null : new Stereo(cPtr, false);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public memblock DFTWindow(memblock m, Wave.DFTWindowType type) {
    memblock ret = new memblock(libwavPINVOKE.Wave_DFTWindow(swigCPtr, memblock.getCPtr(m), (int)type), false);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int nSamplesPerSec() {
    int ret = libwavPINVOKE.Wave_nSamplesPerSec(swigCPtr);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int detectBPM(memblock m, int startBPM, int endBPM, int stepBPM) {
    int ret = libwavPINVOKE.Wave_detectBPM(swigCPtr, memblock.getCPtr(m), startBPM, endBPM, stepBPM);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_WAVEFORMATEX getWaveFormatEx() {
    SWIGTYPE_p_WAVEFORMATEX ret = new SWIGTYPE_p_WAVEFORMATEX(libwavPINVOKE.Wave_getWaveFormatEx(swigCPtr), true);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_WAVEFORMATEXTENSIBLE getWaveFormatExtensible() {
    SWIGTYPE_p_WAVEFORMATEXTENSIBLE ret = new SWIGTYPE_p_WAVEFORMATEXTENSIBLE(libwavPINVOKE.Wave_getWaveFormatExtensible(swigCPtr), true);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isExtendedWave() {
    bool ret = libwavPINVOKE.Wave_isExtendedWave(swigCPtr);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void reset() {
    libwavPINVOKE.Wave_reset(swigCPtr);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
  }

  public double correlation(memblock mem1, memblock mem2) {
    double ret = libwavPINVOKE.Wave_correlation(swigCPtr, memblock.getCPtr(mem1), memblock.getCPtr(mem2));
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum DFTWindowType {
    Rectangular,
    Triangle,
    Hamming,
    Hanning,
    Blackman,
    BlackmanHarris
  }

}
