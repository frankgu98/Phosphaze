//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Stereo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Stereo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Stereo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Stereo() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libwavPINVOKE.delete_Stereo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Stereo(WAVE_H h, memblock single) : this(libwavPINVOKE.new_Stereo__SWIG_0(WAVE_H.getCPtr(h), memblock.getCPtr(single)), true) {
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
  }

  public Stereo(WAVE_H h, memblock left, memblock right) : this(libwavPINVOKE.new_Stereo__SWIG_1(WAVE_H.getCPtr(h), memblock.getCPtr(left), memblock.getCPtr(right)), true) {
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
  }

  public Stereo(int nChannels, int nSamplesPerSec, int bytesPerSample, memblock left, memblock right) : this(libwavPINVOKE.new_Stereo__SWIG_2(nChannels, nSamplesPerSec, bytesPerSample, memblock.getCPtr(left), memblock.getCPtr(right)), true) {
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool next() {
    bool ret = libwavPINVOKE.Stereo_next(swigCPtr);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool prev() {
    bool ret = libwavPINVOKE.Stereo_prev(swigCPtr);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void reset() {
    libwavPINVOKE.Stereo_reset(swigCPtr);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
  }

  public ulong getIndex() {
    ulong ret = libwavPINVOKE.Stereo_getIndex(swigCPtr);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ulong getnSamples() {
    ulong ret = libwavPINVOKE.Stereo_getnSamples(swigCPtr);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getnSamplesPerSec() {
    int ret = libwavPINVOKE.Stereo_getnSamplesPerSec(swigCPtr);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getLeft() {
    int ret = libwavPINVOKE.Stereo_getLeft(swigCPtr);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getRight() {
    int ret = libwavPINVOKE.Stereo_getRight(swigCPtr);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getAvg() {
    int ret = libwavPINVOKE.Stereo_getAvg(swigCPtr);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int setLeft(int val) {
    int ret = libwavPINVOKE.Stereo_setLeft(swigCPtr, val);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int setRight(int val) {
    int ret = libwavPINVOKE.Stereo_setRight(swigCPtr, val);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int setAvg(int val) {
    int ret = libwavPINVOKE.Stereo_setAvg(swigCPtr, val);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int maxAmp() {
    int ret = libwavPINVOKE.Stereo_maxAmp(swigCPtr);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double scale(int data) {
    double ret = libwavPINVOKE.Stereo_scale(swigCPtr, data);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
