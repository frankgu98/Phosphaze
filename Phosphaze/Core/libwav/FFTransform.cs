//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class FFTransform : DFTransform {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal FFTransform(global::System.IntPtr cPtr, bool cMemoryOwn) : base(libwavPINVOKE.FFTransform_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FFTransform obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FFTransform() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libwavPINVOKE.delete_FFTransform(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public FFTransform(Stereo stereo, int nSamplesPerSecond) : this(libwavPINVOKE.new_FFTransform(Stereo.getCPtr(stereo), nSamplesPerSecond), true) {
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ComplexFFT(SWIGTYPE_p_std__valarrayT_std__complexT_double_t_t x) {
    libwavPINVOKE.FFTransform_ComplexFFT__SWIG_0(SWIGTYPE_p_std__valarrayT_std__complexT_double_t_t.getCPtr(x));
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ComplexFFT(SWIGTYPE_p_double real, SWIGTYPE_p_double imag, int nSamples, SWIGTYPE_p_double outputr, SWIGTYPE_p_double outputi) {
    libwavPINVOKE.FFTransform_ComplexFFT__SWIG_1(SWIGTYPE_p_double.getCPtr(real), SWIGTYPE_p_double.getCPtr(imag), nSamples, SWIGTYPE_p_double.getCPtr(outputr), SWIGTYPE_p_double.getCPtr(outputi));
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool hasNext() {
    bool ret = libwavPINVOKE.FFTransform_hasNext(swigCPtr);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override DFTransform.DFTResult next() {
    global::System.IntPtr cPtr = libwavPINVOKE.FFTransform_next__SWIG_0(swigCPtr);
    DFTransform.DFTResult ret = (cPtr == global::System.IntPtr.Zero) ? null : new DFTransform.DFTResult(cPtr, false);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DFTransform.DFTResult next(FFTransform.nextResult type) {
    global::System.IntPtr cPtr = libwavPINVOKE.FFTransform_next__SWIG_1(swigCPtr, (int)type);
    DFTransform.DFTResult ret = (cPtr == global::System.IntPtr.Zero) ? null : new DFTransform.DFTResult(cPtr, false);
    if (libwavPINVOKE.SWIGPendingException.Pending) throw libwavPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum nextResult {
    LEFT,
    RIGHT,
    STEREO
  }

}
